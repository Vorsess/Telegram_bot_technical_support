import telebot
from telebot import types
import sqlite3
import logging
from typing import Optional, Dict, List
import os
from datetime import datetime, timedelta
import json
import signal
import sys
import random
import string
import re
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot_logs.log",
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG = {
    "FEEDBACK_DELAY_HOURS": 24,
    "MAX_DAILY_REQUESTS": 5,
    "SUPPORT_HOURS": {
        "start": 9,
        "end": 21
    },
    "AUTO_CLOSE_HOURS": 48,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    "MAX_MESSAGE_LENGTH": 4000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    "RATING_THRESHOLD": 3,  # –ü–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏
    "PRIORITY_LEVELS": {
        "–ù–∏–∑–∫–∏–π": 1,
        "–°—Ä–µ–¥–Ω–∏–π": 2,
        "–í—ã—Å–æ–∫–∏–π": 3,
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": 4
    }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv('BOT_TOKEN')
SUPPORT_CHAT_ID = os.getenv('SUPPORT_CHAT_ID')
ADMIN_ID = int(os.getenv('ADMIN_ID', '5499105806'))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_mode = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
temp_data = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([BOT_TOKEN, SUPPORT_CHAT_ID, ADMIN_ID]):
    missing_vars = []
    if not BOT_TOKEN:
        missing_vars.append("BOT_TOKEN")
    if not SUPPORT_CHAT_ID:
        missing_vars.append("SUPPORT_CHAT_ID")
    if not ADMIN_ID:
        missing_vars.append("ADMIN_ID")
    logger.error(f"Missing required environment variables: {', '.join(missing_vars)}")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    sys.exit(1)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π
problems = {
    "internet": {
        "title": "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º",
        "icon": "üåê",
        "categories": {
            "slow": {
                "title": "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "steps": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ speedtest.net",
                    "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã"
                ],
                "additional": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–∞–±–µ–ª—å –≤–º–µ—Å—Ç–æ Wi-Fi",
                "priority": "–°—Ä–µ–¥–Ω–∏–π"
            },
            "disconnects": {
                "title": "–ß–∞—Å—Ç—ã–µ —Ä–∞–∑—Ä—ã–≤—ã",
                "steps": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–±–µ–ª—è",
                    "–û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É —Ä–æ—É—Ç–µ—Ä–∞",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ Wi-Fi",
                    "–°–º–µ–Ω–∏—Ç–µ –∫–∞–Ω–∞–ª Wi-Fi –Ω–∞ –º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π"
                ],
                "additional": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wi-Fi Analyzer –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤",
                "priority": "–°—Ä–µ–¥–Ω–∏–π"
            },
            "no_connection": {
                "title": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "steps": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª–µ–π",
                    "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Å–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç—É—Å —É—Å–ª—É–≥–∏",
                    "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º"
                ],
                "additional": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
                "priority": "–í—ã—Å–æ–∫–∏–π"
            }
        }
    },
    "system": {
        "title": "üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏",
        "icon": "üíª",
        "categories": {
            "slow": {
                "title": "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
                "steps": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ –ø–∞–º—è—Ç–∏",
                    "–ó–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                    "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∏—Å–∫–∞",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –≤–∏—Ä—É—Å—ã"
                ],
                "additional": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∏—Å–∫–∞",
                "priority": "–°—Ä–µ–¥–Ω–∏–π"
            },
            "blue_screen": {
                "title": "–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω",
                "steps": [
                    "–ó–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –æ—à–∏–±–∫–∏",
                    "–û–±–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞–º—è—Ç–∏"
                ],
                "additional": "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
                "priority": "–í—ã—Å–æ–∫–∏–π"
            }
        }
    },
    "mobile": {
        "title": "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "icon": "üì±",
        "categories": {
            "battery": {
                "title": "–ë–∞—Ç–∞—Ä–µ—è",
                "steps": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–Ω–µ—Ä–≥–æ–µ–º–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "–û—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏",
                    "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –±–∞—Ç–∞—Ä–µ–∏"
                ],
                "additional": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –±–∞—Ç–∞—Ä–µ–∏ –ø—Ä–∏ –µ–º–∫–æ—Å—Ç–∏ –Ω–∏–∂–µ 80%",
                "priority": "–°—Ä–µ–¥–Ω–∏–π"
            },
            "performance": {
                "title": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "steps": [
                    "–û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à",
                    "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ",
                    "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
                ],
                "additional": "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "priority": "–°—Ä–µ–¥–Ω–∏–π"
            }
        }
    },
    "other": {
        "title": "üîß –î—Ä—É–≥–æ–µ",
        "icon": "üîß",
        "categories": {
            "other": {
                "title": "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
                "steps": [
                    "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ",
                    "–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å–¥–µ–ª–∞—Ç—å",
                    "–î–æ–±–∞–≤—å—Ç–µ –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                ],
                "additional": "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ",
                "priority": "–°—Ä–µ–¥–Ω–∏–π"
            }
        }
    }
}

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
class DatabaseConnection:
    def __init__(self, db_name: str):
        self.db_name = db_name
        self.max_retries = 3
        self.retry_delay = 0.1  # 100ms

    def __enter__(self):
        for attempt in range(self.max_retries):
            try:
                self.conn = sqlite3.connect(self.db_name, timeout=5.0)  # Add 5 second timeout
                self.cursor = self.conn.cursor()
                return self.cursor
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e) and attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay * (attempt + 1))  # Exponential backoff
                    continue
                raise
            except Exception as e:
                raise

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.conn:
            if exc_type is None:
                try:
                    self.conn.commit()
                except Exception as e:
                    logger.error(f"Error committing transaction: {e}")
                    self.conn.rollback()
            else:
                try:
                    self.conn.rollback()
                except Exception as e:
                    logger.error(f"Error rolling back transaction: {e}")
            try:
                self.conn.close()
            except Exception as e:
                logger.error(f"Error closing connection: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    with DatabaseConnection("support_bot.db") as cursor:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP,
            requests_count INTEGER DEFAULT 0,
            is_banned BOOLEAN DEFAULT 0,
            rating REAL DEFAULT 0,
            solved_issues INTEGER DEFAULT 0,
            avg_response_time INTEGER DEFAULT 0
        )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ticket_id TEXT UNIQUE,
            user_id INTEGER,
            category TEXT,
            problem TEXT,
            status TEXT DEFAULT '–û—Ç–∫—Ä—ã—Ç–æ',
            priority TEXT DEFAULT '–°—Ä–µ–¥–Ω–∏–π',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_update TIMESTAMP,
            assigned_to INTEGER,
            response_time INTEGER,
            satisfaction_rating INTEGER,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try:
            cursor.execute("ALTER TABLE requests ADD COLUMN response_time INTEGER")
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        try:
            cursor.execute("ALTER TABLE requests ADD COLUMN satisfaction_rating INTEGER")
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—è–≤–∫–∏
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS request_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            request_id INTEGER,
            sender_id INTEGER,
            message_text TEXT,
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_internal BOOLEAN DEFAULT 0,
            FOREIGN KEY (request_id) REFERENCES requests(id)
        )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            request_id INTEGER,
            user_id INTEGER,
            rating INTEGER,
            comment TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (request_id) REFERENCES requests(id),
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_read BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )
        """)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(BOT_TOKEN)
    logger.info("Bot initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize bot: {e}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º
def get_problems_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for category_id, category_data in problems.items():
        markup.add(types.InlineKeyboardButton(
            f"{category_data['icon']} {category_data['title']}",
            callback_data=f"cat_{category_id}"
        ))
    markup.add(types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support"))
    markup.add(types.InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests"))
    markup.add(types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üí¨ –ß–∞—Ç –∑–∞—è–≤–æ–∫", callback_data="admin_tickets_chat"),
        types.InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")
    )
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    )
    markup.add(
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
        types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications")
    )
    markup.add(
        types.InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")
    )
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
def get_priority_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    for priority, level in CONFIG["PRIORITY_LEVELS"].items():
        markup.add(types.InlineKeyboardButton(
            f"{'üî¥' if level > 2 else 'üü°' if level > 1 else 'üü¢'} {priority}",
            callback_data=f"priority_{priority}"
        ))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏
def get_rating_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        markup.add(types.InlineKeyboardButton(
            "‚≠ê" * i,
            callback_data=f"rate_{i}"
        ))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def send_notification(user_id: int, message: str):
    try:
        for attempt in range(3):  # Try up to 3 times
            try:
                with DatabaseConnection("support_bot.db") as cursor:
                    cursor.execute("""
                        INSERT INTO notifications (user_id, message)
                        VALUES (?, ?)
                    """, (user_id, message))
                    break  # If successful, break the retry loop
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e) and attempt < 2:
                    time.sleep(0.1 * (attempt + 1))  # Exponential backoff
                    continue
                raise
            except Exception as e:
                raise
        
        bot.send_message(user_id, f"üîî {message}")
    except Exception as e:
        logger.error(f"Error sending notification: {e}")
        # Don't re-raise the exception to prevent breaking the main flow

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
def auto_close_inactive_requests():
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT r.ticket_id, r.user_id, r.problem
                FROM requests r
                WHERE r.status = '–û—Ç–∫—Ä—ã—Ç–æ'
                AND r.last_update < datetime('now', ?)
            """, (f"-{CONFIG['AUTO_CLOSE_HOURS']} hours",))
            
            inactive_requests = cursor.fetchall()
            
            for ticket_id, user_id, problem in inactive_requests:
                cursor.execute("""
                    UPDATE requests
                    SET status = '–ó–∞–∫—Ä—ã—Ç–æ',
                        last_update = CURRENT_TIMESTAMP
                    WHERE ticket_id = ?
                """, (ticket_id,))
                
                send_notification(
                    user_id,
                    f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
                )
                
                logger.info(f"Auto-closed request {ticket_id}")
    except Exception as e:
        logger.error(f"Error in auto_close_inactive_requests: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(user_id: int):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            cursor.execute("""
                UPDATE users
                SET solved_issues = (
                    SELECT COUNT(*)
                    FROM requests
                    WHERE user_id = ?
                    AND status = '–†–µ—à–µ–Ω–æ'
                )
                WHERE user_id = ?
            """, (user_id, user_id))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            cursor.execute("""
                UPDATE users
                SET avg_response_time = (
                    SELECT AVG(response_time)
                    FROM requests
                    WHERE user_id = ?
                    AND response_time IS NOT NULL
                )
                WHERE user_id = ?
            """, (user_id, user_id))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            cursor.execute("""
                UPDATE users
                SET rating = (
                    SELECT AVG(satisfaction_rating)
                    FROM requests
                    WHERE user_id = ?
                    AND satisfaction_rating IS NOT NULL
                )
                WHERE user_id = ?
            """, (user_id, user_id))
    except Exception as e:
        logger.error(f"Error in update_user_stats: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            """, (
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            ))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –µ–≥–æ —Ä–µ–∂–∏–º
        if message.from_user.id == ADMIN_ID and admin_mode.get(message.from_user.id, False):
            welcome_text = (
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name}!\n\n"
                "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            bot.send_message(message.chat.id, welcome_text, reply_markup=get_admin_keyboard())
            return

        welcome_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name or '—É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            "–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ. "
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {CONFIG['SUPPORT_HOURS']['start']}-{CONFIG['SUPPORT_HOURS']['end']} (–ú–°–ö)\n"
            "‚ö°Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 15 –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        bot.send_message(message.chat.id, welcome_text, reply_markup=get_problems_keyboard())
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['admin'])
def enter_admin_mode(message):
    try:
        if message.from_user.id == ADMIN_ID:
            admin_mode[message.from_user.id] = True
            logger.info(f"Admin {message.from_user.id} entered admin mode")
            bot.send_message(
                message.chat.id,
                "üîë –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit_admin –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_admin_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    except Exception as e:
        logger.error(f"Error in enter_admin_mode: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['exit_admin'])
def exit_admin_mode(message):
    try:
        if message.from_user.id == ADMIN_ID:
            admin_mode[message.from_user.id] = False
            logger.info(f"Admin {message.from_user.id} exited admin mode")
            bot.send_message(
                message.chat.id,
                "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_problems_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    except Exception as e:
        logger.error(f"Error in exit_admin_mode: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['help'])
def show_help(message):
    try:
        help_text = (
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
            "üìã –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã\n"
            "2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
            "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n"
            "- –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫\n"
            "- –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–∞—Ö\n"
            "- –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
            "Q: –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞?\n"
            "A: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - 15 –º–∏–Ω—É—Ç\n\n"
            "Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?\n"
            "A: –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏' –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å'\n\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é."
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support"))
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))

        bot.send_message(message.chat.id, help_text, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in show_help: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['feedback'])
def start_feedback(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT r.ticket_id, r.problem
                FROM requests r
                WHERE r.user_id = ?
                AND r.status = '–†–µ—à–µ–Ω–æ'
                AND r.satisfaction_rating IS NULL
                ORDER BY r.created_at DESC
            """, (message.from_user.id,))
            
            solved_requests = cursor.fetchall()
            
            if not solved_requests:
                bot.send_message(
                    message.chat.id,
                    "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏."
                )
                return
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            for ticket_id, problem in solved_requests:
                markup.add(types.InlineKeyboardButton(
                    f"#{ticket_id} - {problem[:30]}...",
                    callback_data=f"rate_request_{ticket_id}"
                ))
            
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in start_feedback: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_request_details(message, ticket_id):
    try:
        logger.info(f"Showing details for ticket {ticket_id}")
        
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT problem, status, created_at, last_update, user_id, category, priority
                FROM requests
                WHERE ticket_id = ?
            """, (ticket_id,))
            request = cursor.fetchone()

            if not request:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                return

            problem, status, created_at, last_update, user_id, category, priority = request

            cursor.execute("""
                SELECT sender_id, message_text, sent_at
                FROM request_messages
                WHERE request_id = (
                    SELECT id FROM requests WHERE ticket_id = ?
                )
                ORDER BY sent_at
            """, (ticket_id,))
            messages = cursor.fetchall()

            text = (
                f"üìã –ó–∞—è–≤–∫–∞ #{ticket_id}\n\n"
                f"üìù –ü—Ä–æ–±–ª–µ–º–∞:\n{problem}\n\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
                f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
            )
            if last_update:
                text += f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}\n\n"

            if messages:
                text += "üì® –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
                for msg in messages:
                    sender_id, message_text, sent_at = msg
                    text += f"\n{sent_at}:\n{message_text}\n"

            markup = types.InlineKeyboardMarkup(row_width=1)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.chat.id == user_id:
                if status == '–û—Ç–∫—Ä—ã—Ç–æ':
                    markup.add(
                        types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{ticket_id}"),
                        types.InlineKeyboardButton("‚úÖ –†–µ—à–µ–Ω–æ –∏ –∑–∞–∫—Ä—ã—Ç—å", callback_data=f"resolve_{ticket_id}"),
                        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"cancel_{ticket_id}")
                    )
                elif status == '–†–µ—à–µ–Ω–æ':
                    markup.add(
                        types.InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"rate_{ticket_id}"),
                        types.InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_{ticket_id}")
                    )
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            elif message.chat.id == ADMIN_ID:
                if status == '–û—Ç–∫—Ä—ã—Ç–æ':
                    markup.add(
                        types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{ticket_id}"),
                        types.InlineKeyboardButton("‚úÖ –†–µ—à–∏—Ç—å", callback_data=f"admin_resolve_{ticket_id}"),
                        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{ticket_id}")
                    )
                elif status == '–†–µ—à–µ–Ω–æ':
                    markup.add(
                        types.InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"admin_close_{ticket_id}"),
                        types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{ticket_id}")
                    )
            
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_requests"))

            try:
                bot.send_message(
                    message.chat.id,
                    text,
                    reply_markup=markup
                )
            except Exception as e:
                logger.error(f"Error sending message: {e}")
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    except Exception as e:
        logger.error(f"Error in show_request_details: {e}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def resolve_issue(call):
    try:
        ticket_id = call.data.split("_")[1]
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                UPDATE requests
                SET status = '–†–µ—à–µ–Ω–æ',
                    last_update = CURRENT_TIMESTAMP
                WHERE ticket_id = ?
            """, (ticket_id,))
            
            if cursor.rowcount > 0:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
                cursor.execute("""
                    SELECT user_id, problem
                    FROM requests
                    WHERE ticket_id = ?
                """, (ticket_id,))
                user_id, problem = cursor.fetchone()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                send_notification(
                    user_id,
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} —Ä–µ—à–µ–Ω–∞!\n\n"
                    f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è."
                )
                
                bot.answer_callback_query(
                    call.id,
                    "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                show_request_details(call.message, ticket_id)
            else:
                bot.answer_callback_query(
                    call.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"
                )
    except Exception as e:
        logger.error(f"Error in resolve_issue: {e}")
        bot.answer_callback_query(
            call.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
        )

def close_request(message, ticket_id, is_admin=False):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                UPDATE requests
                SET status = '–ó–∞–∫—Ä—ã—Ç–æ',
                    last_update = CURRENT_TIMESTAMP
                WHERE ticket_id = ?
            """, (ticket_id,))

            if cursor.rowcount > 0:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
                cursor.execute("""
                    SELECT user_id, problem
                    FROM requests
                    WHERE ticket_id = ?
                """, (ticket_id,))
                user_id, problem = cursor.fetchone()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if not is_admin:
                    send_notification(
                        user_id,
                        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.\n\n"
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                    )
                else:
                    send_notification(
                        user_id,
                        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª –≤–∞—à—É –∑–∞—è–≤–∫—É #{ticket_id}.\n\n"
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                    )

                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞."
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                )
    except Exception as e:
        logger.error(f"Error in close_request: {e}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏."
        )

def start_rating(message, ticket_id):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT problem
                FROM requests
                WHERE ticket_id = ?
            """, (ticket_id,))
            problem = cursor.fetchone()[0]

        text = (
            f"üìù –ó–∞—è–≤–∫–∞ #{ticket_id}\n\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:"
        )

        markup = types.InlineKeyboardMarkup(row_width=5)
        for i in range(1, 6):
            markup.add(types.InlineKeyboardButton(
                "‚≠ê" * i,
                callback_data=f"rate_{ticket_id}_{i}"
            ))
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"request_{ticket_id}"))

        bot.send_message(
            message.chat.id,
            text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in start_rating: {e}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ü–µ–Ω–∫–∏."
        )

def process_rating(call):
    try:
        # Handle both rate_request_ and rate_ callbacks
        if call.data.startswith("rate_request_"):
            ticket_id = call.data.split("_")[2]
            start_rating(call.message, ticket_id)
            return
            
        # Handle actual rating submission
        _, ticket_id, rating = call.data.split("_")
        rating = int(rating)

        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                UPDATE requests
                SET satisfaction_rating = ?,
                    last_update = CURRENT_TIMESTAMP
                WHERE ticket_id = ?
            """, (rating, ticket_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_stats(call.from_user.id)

        bot.answer_callback_query(
            call.id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! ({'‚≠ê' * rating})"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ —Å–Ω–æ–≤–∞
        show_request_details(call.message, ticket_id)
    except Exception as e:
        logger.error(f"Error in process_rating: {e}", exc_info=True)
        bot.answer_callback_query(
            call.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏."
        )

def show_problem_solution(message, category_id, subcategory_id):
    try:
        if category_id not in problems or subcategory_id not in problems[category_id]['categories']:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        subcategory = problems[category_id]['categories'][subcategory_id]
        text = (
            f"üîç {subcategory['title']}\n\n"
            "üìã –®–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è:\n"
        )
        
        for i, step in enumerate(subcategory['steps'], 1):
            text += f"{i}. {step}\n"
        
        if 'additional' in subcategory:
            text += f"\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n{subcategory['additional']}\n"
        
        text += f"\n‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {subcategory['priority']}"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(
            "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
            callback_data=f"new_ticket_cat_{category_id}"
        ))
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_{category_id}"))
        
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_problem_solution: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è."
        )

def show_admin_notifications(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT id, message, created_at, is_read
                FROM notifications
                ORDER BY created_at DESC
                LIMIT 50
            """)
            
            notifications = cursor.fetchall()
            
            if not notifications:
                text = "üì≠ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            else:
                text = "üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
                for n_id, message, created_at, is_read in notifications:
                    status = "‚úÖ" if is_read else "‚ùå"
                    text += f"{status} {created_at}\n{message}\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_admin_notifications: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        )

def show_users_list(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT user_id, username, first_name, last_name, 
                       requests_count, rating, solved_issues, avg_response_time
                FROM users
                ORDER BY requests_count DESC
            """)
            
            users = cursor.fetchall()
            
            if not users:
                text = "üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            else:
                text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                for user in users:
                    user_id, username, first_name, last_name, requests_count, rating, solved_issues, avg_time = user
                    text += (
                        f"üë§ {first_name} {last_name or ''}\n"
                        f"üì± @{username or '–Ω–µ—Ç'}\n"
                        f"üÜî ID: {user_id}\n"
                        f"üìä –ó–∞—è–≤–æ–∫: {requests_count}\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating or '–Ω–µ—Ç'}\n"
                        f"‚úÖ –†–µ—à–µ–Ω–æ: {solved_issues}\n"
                        f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time or '–Ω–µ—Ç'} –º–∏–Ω\n\n"
                    )
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_users_list: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

def show_all_requests(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT r.ticket_id, r.problem, r.status, r.created_at, r.priority,
                       u.username, u.first_name, u.last_name
                FROM requests r
                JOIN users u ON r.user_id = u.user_id
                ORDER BY r.created_at DESC
                LIMIT 50
            """)
            
            requests = cursor.fetchall()
            
            if not requests:
                text = "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫"
            else:
                text = "üìã –í—Å–µ –∑–∞—è–≤–∫–∏:\n\n"
                for req in requests:
                    ticket_id, problem, status, created_at, priority, username, first_name, last_name = req
                    text += (
                        f"üîπ #{ticket_id}\n"
                        f"üë§ {first_name} {last_name or ''} (@{username or '–Ω–µ—Ç'})\n"
                        f"üìù {problem[:30]}...\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
                        f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
                    )
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_all_requests: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫."
        )

def show_admin_stats(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_requests,
                    SUM(CASE WHEN status = '–†–µ—à–µ–Ω–æ' THEN 1 ELSE 0 END) as solved_requests,
                    AVG(response_time) as avg_response_time,
                    AVG(satisfaction_rating) as avg_rating
                FROM requests
            """)
            stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor.execute("""
                SELECT category, COUNT(*) as count
                FROM requests
                GROUP BY category
                ORDER BY count DESC
            """)
            categories = cursor.fetchall()
            
            text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                f"üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats[0]}\n"
                f"‚úÖ –†–µ—à–µ–Ω–æ: {stats[1]}\n"
                f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats[2] or '–Ω–µ—Ç'} –º–∏–Ω\n"
                f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats[3] or '–Ω–µ—Ç'}\n\n"
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            )
            
            for category, count in categories:
                text += f"‚Ä¢ {category}: {count}\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_admin_stats: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )

def show_admin_settings(message):
    try:
        text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            f"üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {CONFIG['AUTO_CLOSE_HOURS']} —á\n"
            f"üìù –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {CONFIG['MAX_MESSAGE_LENGTH']} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚≠ê –ü–æ—Ä–æ–≥ –æ—Ü–µ–Ω–∫–∏: {CONFIG['RATING_THRESHOLD']}\n"
            f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {CONFIG['SUPPORT_HOURS']['start']}-{CONFIG['SUPPORT_HOURS']['end']} (–ú–°–ö)\n"
        )
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_admin_settings: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )

def cancel_request(message, ticket_id=None):
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.chat.id in temp_data:
            del temp_data[message.chat.id]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        if ticket_id is None:
            bot.send_message(
                message.chat.id,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_problems_keyboard()
            )
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                UPDATE requests
                SET status = '–û—Ç–º–µ–Ω–µ–Ω–æ',
                    last_update = CURRENT_TIMESTAMP
                WHERE ticket_id = ?
                AND user_id = ?
            """, (ticket_id, message.chat.id))
            
            if cursor.rowcount > 0:
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=get_problems_keyboard()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    reply_markup=get_problems_keyboard()
                )
    except Exception as e:
        logger.error(f"Error in cancel_request: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏.",
            reply_markup=get_problems_keyboard()
        )

def show_admin_analytics(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute("""
                SELECT 
                    strftime('%H', created_at) as hour,
                    COUNT(*) as count
                FROM requests
                GROUP BY hour
                ORDER BY hour
            """)
            hourly_stats = cursor.fetchall()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            cursor.execute("""
                SELECT 
                    strftime('%w', created_at) as weekday,
                    COUNT(*) as count
                FROM requests
                GROUP BY weekday
                ORDER BY weekday
            """)
            daily_stats = cursor.fetchall()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            cursor.execute("""
                SELECT 
                    priority,
                    COUNT(*) as count,
                    AVG(response_time) as avg_time
                FROM requests
                GROUP BY priority
                ORDER BY count DESC
            """)
            priority_stats = cursor.fetchall()
            
            text = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            
            # –ß–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫
            text += "üïê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ —á–∞—Å–∞–º:\n"
            for hour, count in hourly_stats:
                text += f"{hour}:00 - {count} –∑–∞—è–≤–æ–∫\n"
            
            # –î–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            weekdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
            text += "\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
            for weekday, count in daily_stats:
                text += f"{weekdays[int(weekday)]} - {count} –∑–∞—è–≤–æ–∫\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            text += "\n‚ö°Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n"
            for priority, count, avg_time in priority_stats:
                text += (
                    f"{priority}:\n"
                    f"‚Ä¢ –ó–∞—è–≤–æ–∫: {count}\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time or '–Ω–µ—Ç'} –º–∏–Ω\n"
                )
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_admin_analytics: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."
        )

def start_admin_reply(message, ticket_id):
    try:
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É:"
        )
        bot.register_next_step_handler(msg, process_admin_reply, ticket_id)
    except Exception as e:
        logger.error(f"Error in start_admin_reply: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É."
        )

def process_admin_reply(message, ticket_id):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            cursor.execute("""
                SELECT user_id, problem
                FROM requests
                WHERE ticket_id = ?
            """, (ticket_id,))
            user_id, problem = cursor.fetchone()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute("""
                INSERT INTO request_messages (request_id, sender_id, message_text)
                VALUES (
                    (SELECT id FROM requests WHERE ticket_id = ?),
                    ?,
                    ?
                )
            """, (ticket_id, message.from_user.id, message.text))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            send_notification(
                user_id,
                f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É #{ticket_id}:\n\n"
                f"{message.text}"
            )
            
            bot.send_message(
                message.chat.id,
                "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            show_request_details(message, ticket_id)
    except Exception as e:
        logger.error(f"Error in process_admin_reply: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞."
        )

def start_admin_reject(message, ticket_id):
    try:
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:"
        )
        bot.register_next_step_handler(msg, process_admin_reject, ticket_id)
    except Exception as e:
        logger.error(f"Error in start_admin_reject: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."
        )

def process_admin_reject(message, ticket_id):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            cursor.execute("""
                UPDATE requests
                SET status = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                    last_update = CURRENT_TIMESTAMP
                WHERE ticket_id = ?
            """, (ticket_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            cursor.execute("""
                SELECT user_id, problem
                FROM requests
                WHERE ticket_id = ?
            """, (ticket_id,))
            user_id, problem = cursor.fetchone()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
            cursor.execute("""
                INSERT INTO request_messages (request_id, sender_id, message_text)
                VALUES (
                    (SELECT id FROM requests WHERE ticket_id = ?),
                    ?,
                    ?
                )
            """, (ticket_id, message.from_user.id, f"–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {message.text}"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            send_notification(
                user_id,
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}"
            )
            
            bot.send_message(
                message.chat.id,
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            show_request_details(message, ticket_id)
    except Exception as e:
        logger.error(f"Error in process_admin_reject: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."
        )

def add_comment(message, ticket_id):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                INSERT INTO request_messages (request_id, sender_id, message_text)
                VALUES (
                    (SELECT id FROM requests WHERE ticket_id = ?),
                    ?,
                    ?
                )
            """, (ticket_id, message.from_user.id, message.text))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            cursor.execute("""
                UPDATE requests
                SET last_update = CURRENT_TIMESTAMP
                WHERE ticket_id = ?
            """, (ticket_id,))
            
            bot.send_message(
                message.chat.id,
                "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            show_request_details(message, ticket_id)
    except Exception as e:
        logger.error(f"Error in add_comment: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."
        )

def show_admin_tickets_chat(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT r.ticket_id, r.problem, r.status, r.created_at, 
                       u.username, u.first_name, u.last_name
                FROM requests r
                JOIN users u ON r.user_id = u.user_id
                WHERE r.status != '–ó–∞–∫—Ä—ã—Ç–æ'
                ORDER BY 
                    CASE r.status
                        WHEN '–û—Ç–∫—Ä—ã—Ç–æ' THEN 1
                        WHEN '–†–µ—à–µ–Ω–æ' THEN 2
                        ELSE 3
                    END,
                    r.created_at DESC
                LIMIT 10
            """)
            
            active_tickets = cursor.fetchall()
            
            if not active_tickets:
                bot.send_message(
                    message.chat.id,
                    "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                    reply_markup=get_admin_keyboard()
                )
                return
            
            text = "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for ticket in active_tickets:
                ticket_id, problem, status, created_at, username, first_name, last_name = ticket
                status_emoji = {
                    '–û—Ç–∫—Ä—ã—Ç–æ': 'üÜï',
                    '–†–µ—à–µ–Ω–æ': '‚úÖ',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ': '‚ùå'
                }.get(status, '‚ùì')
                
                user_display = f"{first_name} {last_name or ''}" if first_name else f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                button_text = (
                    f"{status_emoji} #{ticket_id} | {status}\n"
                    f"üë§ {user_display}\n"
                    f"üìù {problem[:30]}..."
                )
                
                markup.add(types.InlineKeyboardButton(
                    button_text,
                    callback_data=f"admin_ticket_chat_{ticket_id}"
                ))
            
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_admin_tickets_chat: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫."
        )

def show_admin_ticket_chat(message, ticket_id):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT r.problem, r.status, r.created_at, r.priority,
                       u.username, u.first_name, u.last_name, u.user_id
                FROM requests r
                JOIN users u ON r.user_id = u.user_id
                WHERE r.ticket_id = ?
            """, (ticket_id,))
            
            ticket_info = cursor.fetchone()
            if not ticket_info:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                return
            
            problem, status, created_at, priority, username, first_name, last_name, user_id = ticket_info
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("""
                SELECT rm.sender_id, rm.message_text, rm.sent_at,
                       u.username, u.first_name, u.last_name
                FROM request_messages rm
                LEFT JOIN users u ON rm.sender_id = u.user_id
                WHERE rm.request_id = (SELECT id FROM requests WHERE ticket_id = ?)
                ORDER BY rm.sent_at
            """, (ticket_id,))
            
            messages = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
            user_display = f"{first_name} {last_name or ''}" if first_name else f"@{username}" if username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            
            text = (
                f"üìã –ó–∞—è–≤–∫–∞ #{ticket_id}\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n\n"
                f"üìù –ü—Ä–æ–±–ª–µ–º–∞:\n{problem}\n\n"
            )
            
            if messages:
                text += "üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
                for msg in messages:
                    sender_id, msg_text, sent_at, s_username, s_first_name, s_last_name = msg
                    sender_display = (
                        "üë®‚Äçüíº –ê–¥–º–∏–Ω: " if sender_id == ADMIN_ID
                        else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
                    )
                    text += f"\n{sent_at}\n{sender_display}{msg_text}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            if status == '–û—Ç–∫—Ä—ã—Ç–æ':
                markup.add(
                    types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{ticket_id}"),
                    types.InlineKeyboardButton("‚úÖ –†–µ—à–µ–Ω–æ", callback_data=f"admin_resolve_{ticket_id}")
                )
                markup.add(
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{ticket_id}")
                )
            elif status == '–†–µ—à–µ–Ω–æ':
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"admin_close_{ticket_id}"),
                    types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{ticket_id}")
                )
            
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_tickets_chat"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_admin_ticket_chat: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."
        )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    try:
        logger.info(f"Received callback: {call.data} from user {call.from_user.id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
        if call.from_user.id == ADMIN_ID:
            if call.data == "admin_tickets_chat":
                show_admin_tickets_chat(call.message)
                return
            elif call.data.startswith("admin_ticket_chat_"):
                ticket_id = call.data.split("_")[3]
                show_admin_ticket_chat(call.message, ticket_id)
                return
            elif call.data == "admin_all_requests":
                show_all_requests(call.message)
                return
            elif call.data == "admin_stats":
                show_admin_stats(call.message)
                return
            elif call.data == "admin_users":
                show_users_list(call.message)
                return
            elif call.data == "admin_settings":
                show_admin_settings(call.message)
                return
            elif call.data == "admin_notifications":
                show_admin_notifications(call.message)
                return
            elif call.data == "admin_analytics":
                show_admin_analytics(call.message)
                return
            elif call.data.startswith("admin_reply_"):
                ticket_id = call.data.split("_")[2]
                start_admin_reply(call.message, ticket_id)
                return
            elif call.data.startswith("admin_resolve_"):
                ticket_id = call.data.split("_")[2]
                resolve_issue(call)
                return
            elif call.data.startswith("admin_reject_"):
                ticket_id = call.data.split("_")[2]
                start_admin_reject(call.message, ticket_id)
                return
            elif call.data.startswith("admin_close_"):
                ticket_id = call.data.split("_")[2]
                close_request(call.message, ticket_id, is_admin=True)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if call.data == "help":
            show_help(call.message)
        elif call.data == "cancel_new_ticket":
            cancel_request(call.message)
        elif call.data.startswith("new_ticket_cat_"):
            category_id = call.data.split("_")[3]
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞—è–≤–∫–∏
            ticket_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            temp_data[call.message.chat.id] = {
                'ticket_id': ticket_id,
                'category': category_id
            }
            
            # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            msg = bot.send_message(
                call.message.chat.id,
                "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:"
            )
            bot.register_next_step_handler(msg, process_problem_description)
        elif call.data.startswith("cat_"):
            category_id = call.data[4:]
            show_category_problems(call.message, category_id)
        elif call.data.startswith("subcat_"):
            try:
                _, category_id, subcategory_id = call.data.split("_", 2)
                show_problem_solution(call.message, category_id, subcategory_id)
            except ValueError:
                logger.error(f"Invalid subcategory format: {call.data}")
                bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        elif call.data == "support":
            start_support_request(call.message)
        elif call.data == "my_requests":
            show_user_requests(call.message)
        elif call.data == "back_to_main":
            try:
                if call.from_user.id == ADMIN_ID and admin_mode.get(call.from_user.id, False):
                    bot.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=get_admin_keyboard()
                    )
                else:
                    bot.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
                        call.message.chat.id,
                        call.message.message_id,
                        reply_markup=get_problems_keyboard()
                    )
            except Exception as e:
                logger.error(f"Error in back_to_main: {e}")
                bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        elif call.data.startswith("request_"):
            ticket_id = call.data[8:]
            show_request_details(call.message, ticket_id)
        elif call.data.startswith("resolve_"):
            resolve_issue(call)
        elif call.data.startswith("comment_"):
            ticket_id = call.data[8:]
            try:
                with DatabaseConnection("support_bot.db") as cursor:
                    cursor.execute("SELECT id FROM requests WHERE ticket_id = ?", (ticket_id,))
                    if cursor.fetchone():
                        msg = bot.send_message(
                            call.message.chat.id,
                            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ:"
                        )
                        bot.register_next_step_handler(msg, add_comment, ticket_id)
                    else:
                        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                logger.error(f"Error in comment handler: {e}")
                bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        elif call.data.startswith("cancel_"):
            ticket_id = call.data[7:]
            cancel_request(call.message, ticket_id)
        elif call.data.startswith("close_"):
            ticket_id = call.data[6:]
            close_request(call.message, ticket_id)
        elif call.data.startswith("rate_"):
            if "_" in call.data[5:]:  # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ü–µ–Ω–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
                process_rating(call)
            else:  # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏
                ticket_id = call.data[5:]
                start_rating(call.message, ticket_id)
        else:
            logger.warning(f"Unknown callback data: {call.data}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        logger.error(f"Error in callback handler: {str(e)}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as inner_e:
            logger.error(f"Error sending error message: {inner_e}")

def process_problem_description(message):
    try:
        if message.chat.id not in temp_data:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_problems_keyboard()
            )
            return

        ticket_data = temp_data[message.chat.id]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                INSERT INTO requests (ticket_id, user_id, category, problem, created_at, last_update)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (ticket_data['ticket_id'], message.chat.id, ticket_data['category'], message.text))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_notification = (
            f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_data['ticket_id']}\n"
            f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name or ''} (@{message.from_user.username or '–Ω–µ—Ç'})\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {problems[ticket_data['category']]['title']}\n\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞:\n{message.text}"
        )
        bot.send_message(ADMIN_ID, admin_notification)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        confirmation = (
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_data['ticket_id']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –æ—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests"))
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main"))
        
        bot.send_message(message.chat.id, confirmation, reply_markup=markup)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del temp_data[message.chat.id]

    except Exception as e:
        logger.error(f"Error in process_problem_description: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_problems_keyboard()
        )

def signal_handler(sig, frame):
    print('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...')
    logger.info("Bot stopping by interrupt signal")
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def show_user_requests(message):
    try:
        with DatabaseConnection("support_bot.db") as cursor:
            cursor.execute("""
                SELECT ticket_id, problem, status, created_at, priority
                FROM requests
                WHERE user_id = ?
                ORDER BY created_at DESC
            """, (message.chat.id,))
            
            requests = cursor.fetchall()
            
            if not requests:
                bot.send_message(
                    message.chat.id,
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
                )
                return
            
            text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for ticket_id, problem, status, created_at, priority in requests:
                text += (
                    f"üîπ #{ticket_id}\n"
                    f"üìù {problem[:30]}...\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
                    f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
                )
                markup.add(types.InlineKeyboardButton(
                    f"#{ticket_id} - {problem[:30]}...",
                    callback_data=f"request_{ticket_id}"
                ))
            
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.send_message(
                message.chat.id,
                text,
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_user_requests: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫."
        )

def show_category_problems(message, category_id):
    try:
        if category_id not in problems:
            bot.send_message(
                message.chat.id,
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        category = problems[category_id]
        text = f"{category['icon']} {category['title']}\n\n"
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for subcategory_id, subcategory_data in category['categories'].items():
            markup.add(types.InlineKeyboardButton(
                subcategory_data['title'],
                callback_data=f"subcat_{category_id}_{subcategory_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_category_problems: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        )

def start_support_request(message):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞—è–≤–∫–∏
        ticket_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        temp_data[message.chat.id] = {
            'ticket_id': ticket_id,
            'step': 'category'
        }
        
        text = (
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:"
        )
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        for category_id, category_data in problems.items():
            markup.add(types.InlineKeyboardButton(
                f"{category_data['icon']} {category_data['title']}",
                callback_data=f"new_ticket_cat_{category_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_ticket"))
        
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in start_support_request: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏."
        )

if __name__ == "__main__":
    try:
        init_database()
        logger.info("Bot started successfully")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        def periodic_tasks():
            while True:
                try:
                    auto_close_inactive_requests()
                    time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                except Exception as e:
                    logger.error(f"Error in periodic tasks: {e}")
                    time.sleep(60)
        
        import threading
        periodic_thread = threading.Thread(target=periodic_tasks)
        periodic_thread.daemon = True
        periodic_thread.start()
        
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Critical error: {e}")
        bot.stop_polling()
